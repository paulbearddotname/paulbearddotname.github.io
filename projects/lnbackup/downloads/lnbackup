#!/bin/bash

# Copyright (c) 2017 Paul Beard. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# fe290dde64bb3617

usage ()
{
    echo "lnbackup version 1.1.1
Copyright (c) 2017 Paul Beard.
Website: paulbeard.name

lnbackup is a backup program capable of creating backup directories that mirror the source without duplicating unmodified files.

Usage: $0 [-h] SRC_FROM DEST

Options:
 -h       show this help
 SRC_FROM read source list from file
 DEST     destination directory" >&2
}

while getopts h OPT
do
    case $OPT in
        *)
            usage
            [[ $OPT == h ]]
            exit
            ;;
    esac
done

if [[ $# -ne 2 ]]
then
    usage
    exit 1
fi

SRC_FROM=$1
DEST=$2

IFS=$'\n' read -r -d '' -a SRCS <<EOD
$(<"$SRC_FROM")
EOD

if [[ ${#SRCS[@]} -lt 1 ]]
then
    echo 'SRC not specified' >&2
    exit 1
fi

for SRC in "${SRCS[@]}"
do
    if ! [[ $SRC == /* && /$SRC/ != */../* ]]
    then
        echo "$SRC is not absolute" >&2
        exit 1
    fi

    if [[ $SRC == -* ]]
    then
        echo "$SRC starts with -" >&2
        exit 1
    fi
done

if [[ ! -e $DEST ]]
then
    echo 'DEST not found' >&2
    exit 1
fi

if perl -MFile::Find -e '' 2>/dev/null #check for perl and the File::Find perl module
then
    findw ()
    {
        #fast find
        perl -MFile::Find -e 'foreach(@ARGV){File::Find::find({wanted=>sub{(($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime)=lstat($_))&&(-f _||-d _||-l _)&&printf"%s\t%s\t%s\t%s\t%s\t%04o\t%s\t%s\n",-f _?"-":-d _?"d":"l",$mtime,$size,$gid,$uid,$mode&07777,$dev,$_;},no_chdir=>1},$_);}' -- "$@"
    }
elif find . -quit -printf '' 2>/dev/null #GNU find
then
    findw ()
    {
        find -- "$@" \( -type d -o -type f -o -type l \) -printf '%.1M\t%Ts\t%s\t%G\t%U\t%.4m\t%D\t%p\n'
    }
else #BSD stat
    findw ()
    {
        #slow find
        find -- "$@" \( -type d -o -type f -o -type l \) -exec stat -f '%.1Sp%t%m%t%z%t%g%t%u%t%Mp%.3Lp%t%d%t%N' {} +
    }
fi

if perl -e '' 2>/dev/null
then
    lnw ()
    {
        #fast link
        perl -F'\t' -lane 'link$F[0],$F[1]or print$F[0]," ",$F[1]," link failed"' >&2
    }
else
    lnw ()
    {
        #slow link
        while IFS=$'\t' read -r LINK_SRC LINK_DEST; do ln -- "$LINK_SRC" "$LINK_DEST"; done
    }
fi

SHA1SUM=(shasum -a 1)
if sha1sum <<<'' >/dev/null 2>&1
then
    SHA1SUM=(sha1sum)
fi

CP_CLONEFILE=()
if cp -c /dev/null / 2>&1 | grep -q clonefile #check for clonefile support
then
    CP_CLONEFILE=(-c)
fi

CP_REFLINK=()
if cp --reflink=auto --help 2>/dev/null >&2 #check for reflink support
then
    CP_REFLINK=('--reflink=auto')
fi

DEST_DEV=$(stat -c %d -- "$DEST" 2>/dev/null || stat -f %d -- "$DEST") ||
exit

START=$(date +%Y-%m-%d-%H%M%S) ||
exit

if [[ -e $DEST/$START ]]
then
    echo 'Backup already exists' >&2

    exit 1
fi

_trap ()
{
    echo 'Backup interrupted' >&2

    rm -rf -- "${DEST:?}/${START:?}.incomplete"
    exit 1
}
trap _trap HUP INT TERM

echo 'Backup started' >&2

mkdir -- "$DEST/$START.incomplete" ||
exit

for SRC in "${SRCS[@]}"
do
    mkdir -p -- "$DEST/$START.incomplete/$(dirname -- "$SRC")" ||
    exit
done

TYPE_C=1 MTIME_C=2 SIZE_C=3 GID_C=4 UID_C=5 MOD_C=6 DEV_C=7 SRC_C=8

findw "${SRCS[@]}" |
awk -F '\t' -v 'OFS=\t' -v "C=$SRC_C" '{gsub(/\/\/+/,"/",$C);print}' |
sort -t $'\t' -k $SRC_C,$SRC_C |

#left join latest on path
{
    if [[ -e "$DEST/Latest/" ]]
    then
        findw "$DEST/Latest/" |
        awk -F '\t' -v 'OFS=\t' -v "P=$DEST/Latest" -v "C=$SRC_C" 'BEGIN{L=length(P)}{$C=substr($C,L+1);gsub(/\/\/+/,"/",$C);print}' |
        sort -t $'\t' -k $SRC_C,$SRC_C
    fi |
    join -t $'\t' -1 $SRC_C -2 $SRC_C -o 1.$TYPE_C,1.$MTIME_C,1.$SIZE_C,1.$GID_C,1.$UID_C,1.$MOD_C,1.$DEV_C,2.$TYPE_C,2.$MTIME_C,2.$SIZE_C,2.$GID_C,2.$UID_C,2.$MOD_C,1.$SRC_C -a 1 -e - -- /dev/fd/4 -
} 4<&0 |

while IFS=$'\t' read -r SRC_TYPE SRC_MTIME SRC_SIZE SRC_GID SRC_UID SRC_MOD SRC_DEV L_TYPE L_MTIME L_SIZE L_GID L_UID L_MOD SRC
do
    case $SRC_TYPE in
        d)
            mkdir -m "$SRC_MOD" -- "$DEST/$START.incomplete/$SRC" &&
            if [[ "$SRC_UID" != "$UID" || "$SRC_GID" != "${GROUPS[0]}" ]]
            then
                chown "$SRC_UID:$SRC_GID" "$DEST/$START.incomplete/$SRC"
            fi
            ;;
        l)
            cp -pPR --                  "$SRC" \
                "$DEST/$START.incomplete/$SRC"
            ;;
        -)
            if [[ "$SRC_TYPE" == "$L_TYPE" && "$SRC_MTIME" == "$L_MTIME" && "$SRC_SIZE" == "$L_SIZE" && "$SRC_GID" == "$L_GID" && "$SRC_UID" == "$L_UID" && "$SRC_MOD" == "$L_MOD" ]] #file unmodified
            then
                echo "$DEST/Latest/$SRC"$'\t'"$DEST/$START.incomplete/$SRC"
            else #file modified
                echo "$SRC" >&2

                HASH=$("${SHA1SUM[@]}" -b -- "$SRC") &&
                HASH=${HASH#\\} &&
                HASH=${HASH%% *} &&
                KEY="$HASH $SRC_MOD $SRC_UID $SRC_GID $SRC_MTIME $SRC_SIZE" &&
                KEY_P=${HASH:0:2} &&

                if [[ -e "$DEST/Index/$KEY_P/$KEY" ]] #key found in index
                then
                    echo "$DEST/Index/$KEY_P/$KEY"$'\t'"$DEST/$START.incomplete/$SRC"
                else #key not found in index
                    if [[ "$SRC_DEV" == "$DEST_DEV" && "${#CP_REFLINK[@]}" -eq 0 ]]
                    then
                        cp "${CP_CLONEFILE[@]}" -p -- "$SRC" \
                              "$DEST/$START.incomplete/$SRC"
                    else
                        cp "${CP_REFLINK[@]}"   -p -- "$SRC" \
                              "$DEST/$START.incomplete/$SRC"
                    fi &&
                    mkdir -p -- "$DEST/Index/$KEY_P" &&
                    ln       -- "$DEST/$START.incomplete/$SRC" \
                                "$DEST/Index/$KEY_P/$KEY"
                fi
            fi
            ;;
    esac
done |

lnw

if [[ -e $DEST/$START ]]
then
    echo 'Backup already exists' >&2

    rm -rf -- "${DEST:?}/${START:?}.incomplete"
    exit 1
fi

mv    -- "$DEST/$START.incomplete" \
         "$DEST/$START" &&
rm -f -- "$DEST/Latest" &&
ln -s -- "$START" \
         "$DEST/Latest" ||
exit

echo 'Backup complete' >&2

if date -d '1970-01-01 00:00:00' >/dev/null 2>&1 #GNU date
then
    DATE_ISO=(-d)

    DAY_AGO=$(date -d -1day +%s) &&
    MONTH_AGO=$(date -d -1month +%s)
else #BSD date
    DATE_ISO=(-j -f %Y-%m-%d' '%H:%M:%S)

    DAY_AGO=$(date -v -1d +%s) &&
    MONTH_AGO=$(date -v -1m +%s)
fi ||
exit

SRC_C=1 WEEK_C=2 DATE_C=3 TIMESTAMP_C=4 WEEK_I_C=5 DATE_I_C=6

find -- "$DEST/" -mindepth 1 -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]' |
awk -F '\t' -v 'OFS=\t' -v "P=$DEST" -v "C=$SRC_C" 'BEGIN{L=length(P)}{$C=substr($C,L+1);sub(/^\/+/,"",$C);print}' |
sort -t $'\t' -k $SRC_C,$SRC_C |

awk '$0=substr($0,1,10)" "substr($0,12,2)":"substr($0,14,2)":"substr($0,16,2)' | #%Y-%m-%d-%H%M%S -> %Y-%m-%d %H:%M:%S
xargs -I {} date "${DATE_ISO[@]}" {} +%Y-%m-%d-%H%M%S%t%G%V%t%Y%m%d%t%s | #%Y-%m-%d %H:%M:%S -> %Y-%m-%d-%H%M%S%t%G%V%t%Y%m%d%t%s

awk -F '\t' -v 'OFS=\t' -v "C=$WEEK_C" '{if($C!=P)I=0;P=$C;print$0,I++}' |
awk -F '\t' -v 'OFS=\t' -v "C=$DATE_C" '{if($C!=P)I=0;P=$C;print$0,I++}' |

awk -F '\t' -v "SRC_C=$SRC_C" -v "TIMESTAMP_C=$TIMESTAMP_C" -v "WEEK_I_C=$WEEK_I_C" -v "DATE_I_C=$DATE_I_C" -v "MONTH_AGO=$MONTH_AGO" -v "DAY_AGO=$DAY_AGO" \
    '{if($TIMESTAMP_C<=MONTH_AGO&&$WEEK_I_C!=0||MONTH_AGO<$TIMESTAMP_C&&$TIMESTAMP_C<=DAY_AGO&&$DATE_I_C!=0)print$SRC_C}' |

while read -r BACKUP
do
    echo "Removing old backup: $BACKUP" >&2

    rm -rf -- "${DEST:?}/${BACKUP:?}"
done

#prune index
[[ ! -e ${DEST:?}/Index ]] || find -- "${DEST:?}/Index" -mindepth 2 -maxdepth 2 -type f -links 1 -delete
